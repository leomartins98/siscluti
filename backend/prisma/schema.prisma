// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/siscluti?schema=public"
}

model Administrador {
  idAdm       Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  nome        String        @db.VarChar(255)
  cpf         String?       @unique
  email       String?       @unique
  senha       String
  salario     Float
  Local       Local?
  Funcionario Funcionario[]
}

model Local {
  idLocal       Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  nome          String        @db.VarChar(255)
  administrador Administrador @relation(fields: [admId], references: [idAdm])
  admId         Int           @unique
  Funcionario   Funcionario[]
  Professor     Professor[]
  Aluno         Aluno[]
}

model Funcionario {
  idFunc        Int           @id @default(autoincrement())
  localId       Int
  nome          String        @db.VarChar(255)
  admId         Int
  cpf           String        @unique @db.VarChar(255)
  email         String        @unique @db.VarChar(255)
  senha         String        @db.VarChar(255)
  salario       Float
  administrador Administrador @relation(fields: [admId], references: [idAdm])
  local         Local         @relation(fields: [localId], references: [idLocal])
  Agendamento   Agendamento[]
}

model Professor {
  idProf  Int       @id @default(autoincrement())
  nome    String?
  local   Local     @relation(fields: [localId], references: [idLocal])
  localId Int
  cpf     String?   @unique
  salario Float
  Aluno   Aluno[]
  Horario Horario[]
}

model Horario {
  idHorario  Int       @id @default(autoincrement())
  horaInicio DateTime  @unique
  horaFinal  DateTime  @unique
  professor  Professor @relation(fields: [profId], references: [idProf])
  profId     Int
}

model Aluno {
  idAluno     Int          @id @default(autoincrement())
  armas       Arma[]
  nome        String?      @unique
  nasc        DateTime
  local       Local        @relation(fields: [localId], references: [idLocal])
  localId     Int
  professor   Professor    @relation(fields: [profId], references: [idProf])
  profId      Int
  Agendamento Agendamento[]
  Pagamento   Pagamento[]
}

model Arma {
  id      Int     @id @default(autoincrement())
  alunoId Int
  nome    String?
  tipo    String?
  aluno   Aluno   @relation(fields: [alunoId], references: [idAluno])
}

model Agendamento {
  idAgendamento          Int         @id @default(autoincrement())
  funcId                 Int         
  alunoId                Int         
  createdAt              DateTime    @default(now())
  horaInicioAgendamento  DateTime    @unique
  horaTerminoAgendamento DateTime    @unique
  aluno                  Aluno       @relation(fields: [alunoId], references: [idAluno])
  funcionario            Funcionario @relation(fields: [funcId], references: [idFunc])
}

model Pagamento {
  idPagamento Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tipo        String?
  alunoId     Int
  valor       Float
  status      String
  aluno       Aluno    @relation(fields: [alunoId], references: [idAluno])
}

model Pessoa {
  id    Int    @id @default(autoincrement())
  email String
  senha String
  cargo Int
}
